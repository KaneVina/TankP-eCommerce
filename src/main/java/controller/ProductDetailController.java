package controller;

import dao.ProductDAO;
import dao.CategoryDAO;
import dao.GalleryDAO;
import dao.ProductVariantDAO;
import dao.ColorDAO;
import dao.SizeDAO;
import java.io.IOException;
import java.util.List;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Product;
import model.Category;
import model.Gallery;
import model.ProductVariant;
import model.Color; // üí° TH√äM IMPORT
import model.Size;  // üí° TH√äM IMPORT

public class ProductDetailController extends HttpServlet {

    // üí° S·ª¨A L·∫†I: Ch·ªâ khai b√°o, kh√¥ng kh·ªüi t·∫°o
    private ProductDAO productDAO;
    private CategoryDAO categoryDAO;
    private GalleryDAO galleryDAO;
    private ProductVariantDAO productVariantDAO;
    private ColorDAO colorDAO; // Th√™m
    private SizeDAO sizeDAO;   // Th√™m

    private static final String ERROR_PAGE = "view/pages/errorPage.jsp";
    private static final String PRODUCT_DETAIL_PAGE = "view/pages/productDetail.jsp";

    // üí° TH√äM H√ÄM INIT() (Gi·ªëng h·ªát HomeController)
    @Override
    public void init() throws ServletException {
        productDAO = new ProductDAO();
        categoryDAO = new CategoryDAO();
        galleryDAO = new GalleryDAO();
        productVariantDAO = new ProductVariantDAO();
        colorDAO = new ColorDAO();
        sizeDAO = new SizeDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String idParam = request.getParameter("id");
        int productId;

        // 1. X·ª≠ l√Ω l·ªói: Thi·∫øu tham s·ªë ID
        if (idParam == null || idParam.isEmpty()) {
            request.setAttribute("errorCode", 400);
            request.setAttribute("errorMessage", "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Thi·∫øu tham s·ªë ID s·∫£n ph·∫©m.");
            request.getRequestDispatcher(ERROR_PAGE).forward(request, response);
            return;
        }

        try {
            // Chuy·ªÉn ƒë·ªïi ID sang s·ªë nguy√™n
            productId = Integer.parseInt(idParam);

            // 2. T√¨m Product c∆° b·∫£n
            Product tempProduct = new Product();
            tempProduct.setId(productId);
            Product productFound = productDAO.findById(tempProduct);

            // 2.1. X·ª≠ l√Ω l·ªói: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
            if (productFound == null) {
                request.setAttribute("errorCode", 404);
                request.setAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ ID: " + productId);
                request.getRequestDispatcher(ERROR_PAGE).forward(request, response);
                return;
            }

            // 3. T√≠ch h·ª£p Gallery (·∫¢nh)
            List<Gallery> galleries = galleryDAO.findByProductId(productId);
            productFound.setGalleries(galleries);

            // 4. T√≠ch h·ª£p ProductVariant (Bi·∫øn th·ªÉ)
            List<ProductVariant> variants = productVariantDAO.findByProductId(productId);
            if (variants != null && !variants.isEmpty()) {
                for (ProductVariant v : variants) {
                    // T√≠ch h·ª£p Color
                    if (v.getColor_id() > 0) {
                        Color colorFound = colorDAO.findById(v.getColor_id());
                        if (colorFound != null) {
                            v.setColor(colorFound);
                        }
                    }
                    // T√≠ch h·ª£p Size
                    if (v.getSize_id() > 0) {
                        Size sizeFound = sizeDAO.findById(v.getSize_id());
                        if (sizeFound != null) {
                            v.setSize(sizeFound);
                        }
                    }
                }
            }
            // G√°n danh s√°ch variants (ƒë√£ c√≥ color/size) v√†o s·∫£n ph·∫©m
            productFound.setVariants(variants);

            // 5. T√≠ch h·ª£p Category
            Category categoryFound = null;
            if (productFound.getCategory_id() != 0) {
                categoryFound = categoryDAO.findById(productFound.getCategory_id());
            }

            // 6. Th√†nh c√¥ng: ƒê·∫∑t ƒë·ªëi t∆∞·ª£ng Product v√† Category v√†o request scope
            request.setAttribute("product", productFound);
            request.setAttribute("category", categoryFound);

            request.getRequestDispatcher(PRODUCT_DETAIL_PAGE).forward(request, response);

        } catch (NumberFormatException e) {
            // 7. X·ª≠ l√Ω l·ªói: ID kh√¥ng ph·∫£i l√† s·ªë nguy√™n (HTTP 400 Bad Request)
            request.setAttribute("errorCode", 400);
            request.setAttribute("errorMessage", "Tham s·ªë ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá (ph·∫£i l√† s·ªë nguy√™n).");
            request.getRequestDispatcher(ERROR_PAGE).forward(request, response);
        } catch (Exception e) {
            // 8. X·ª≠ l√Ω l·ªói chung (V√≠ d·ª•: L·ªói DB)
            request.setAttribute("errorCode", 500);
            request.setAttribute("errorMessage", "L·ªói x·ª≠ l√Ω h·ªá th·ªëng khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m: " + e.getMessage());
            e.printStackTrace(); 
            request.getRequestDispatcher(ERROR_PAGE).forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doGet(request, response);
    }
}